"""The Game of Pig"""

from dice import make_fair_die, make_test_die
from ucb import main, trace, log_current_line, interact
from math import sqrt

goal = 100  # The goal of pig is always to score 100 points.

# Taking turns

def roll(turn_total, outcome):
    """Performs the roll action, which adds outcome to turn_total, or loses the
    turn on outcome == 1.

    Arguments:
    turn -- number of points accumulated by the player so far during the turn
    outcome -- the outcome of the roll (the number generated by the die)

    Returns three values in order:
    - the number of points the player scores after the roll
      Note: If the turn is not over after this roll, this return value is 0.
            No points are scored until the end of the turn.
    - the player turn point total after the roll
    - a boolean; whether or not the player's turn is over
    
    >>> roll(7, 3)
    (0, 10, False)
    >>> roll(99, 1)
    (1, 0, True)
    """
    turn_score = 0
    if outcome == 1:
    	    turn_score = outcome
    	    turn_over = True
    	    turn_total = 0
    else:
    	    turn_total = turn_total + outcome
    	    turn_over = False
    return (turn_score, turn_total, turn_over)

def hold(turn_total, outcome):
    """Performs the hold action, which adds turn_total to the player's score.

    Arguments:
    turn -- number of points accumulated by the player so far during the turn
    outcome -- the outcome of the roll, ie. the number generated by the die

    Returns three values in order:
    - the number of points the player scores after holding
    - the player turn total after the roll (always 0)
    - a boolean; whether or not the player's turn is over
    
    >>> hold(99, 1)
    (99, 0, True)
    """
    return (turn_total, 0, True)

def take_turn(plan, dice=make_fair_die(), who='Someone', comments=False):
    """Simulate a single turn and return the points scored for the whole turn.

    Important: The d function should be called once, **and only once**, for
               every action taken!  Testing depends upon this fact.
    
    Arguments:
    plan -- a function that takes the turn total and returns an action function
    dice -- a function that takes no args and returns an integer outcome.
            Note: dice is non-pure!  Call it exactly once per action.
    who -- name of the current player
    comments -- a boolean; whether commentary is enabled
    """
    #bug: need to roll again when holding
    score_for_turn = 0  # Points scored in the whole turn
    dice_roll = 0
    if plan(score_for_turn) == roll:
    	    dice_roll = dice()
    	    if roll(score_for_turn, dice_roll)[2] == True:
    	    	    score_for_turn = roll(score_for_turn, dice_roll)[0]
    	    	    if comments == True:
    	    	    	    commentate(roll, dice_roll, 1, 1, True, who)
    	    	    return 1
    	    elif roll(score_for_turn, dice_roll)[2] == False:
    	    	    score_for_turn = roll(score_for_turn, dice_roll)[1]
    	    	    if comments == True:
    	    	    	    commentate(roll, dice_roll, score_for_turn, score_for_turn, False, who)
    	    	    while plan(score_for_turn) == roll and roll(score_for_turn, dice_roll)[2] == False:
    	    	    	    dice_roll = dice()
    	    	    	    score_for_turn = roll(score_for_turn, dice_roll)[1]
    	    	    	    if roll(score_for_turn, dice_roll)[2] == True:
    	    	    	    	    if comments == True:
    	    	    	    	    	    commentate(roll, dice_roll, 1, 1, True, who)
    	    	    	    	    return 1
    	    	    	    if comments == True:
    	    	    	    	    commentate(roll, dice_roll, score_for_turn, score_for_turn, False, who)
    	    	    dice_roll = dice()
    	    	    score_for_turn = hold(score_for_turn, dice_roll)[0]
    	    	    if comments == True:
    	    	    	    commentate(hold, '', score_for_turn, score_for_turn, True, who)
    	    	    return score_for_turn
    else:
    	    score_for_turn = hold(score_for_turn, dice_roll)[0]
    	    if comments == True:
    	    	    commentate(hold, '', score_for_turn, score_for_turn, True, who)
    return score_for_turn

def take_turn_test():
    """Test the take_turn function using deterministic test dice."""
    plan = make_roll_until_plan(10)  # plan is a function (see problem 2)
    assert take_turn(plan, make_test_die(4, 6, 1)) == 10
    assert take_turn(plan, make_test_die(4, 4, 4)) == 12
    print(take_turn(plan))  # Not deterministic


# Commentating

def commentate(action, outcome, score_for_turn, turn_total, over, who):
    """Print descriptive comments about a game event.
    
    action -- the action function chosen by the current player
    outcome -- the outcome of the die roll
    score_for_turn -- the points scored in this turn by the current player
    turn_total -- the current turn total
    over -- a boolean that indicates whether the turn is over
    who -- the name of the current player 
    """
    print(draw_number(outcome))
    print(who, describe_action(action))
    if over:
        print(who, 'scored', score_for_turn, 'point(s) on this turn.')
    else:
        print(who, 'now has a turn total of', turn_total, 'point(s).')

def describe_action(action):
    """Generate a string that describes an action.

    action -- a function, which should be either hold or roll    

    If action is neither the hold nor roll function, the description should
    announce that cheating has occurred.

    >>> describe_action(roll)
    'chose to roll.'
    >>> describe_action(hold)
    'decided to hold.'
    >>> describe_action(commentate)
    'took an illegal action!'
    """
    if action == roll:
    	    return 'chose to roll.'
    elif action == hold:
    	    return 'decided to hold.'
    else:
    	    return 'took an illegal action!'
    return 'did something...'
 
def draw_number(n, dot='*'):
    """Return an ascii art representation of rolling the number n.

    >>> print(draw_number(5))
     -------
    | *   * |
    |   *   |
    | *   * |
     -------
    """
    if n == 1:
    	    return draw_die(True, False, False, False, dot)
    elif n == 2:
    	    return draw_die(False, False, True, False, dot)
    elif n == 3:
    	    return draw_die(True, False, True, False, dot)
    elif n == 4:
    	    return draw_die(False, True, True, False, dot)
    elif n == 5:
    	    return draw_die(True, True, True, False, dot)
    elif n == 6:
    	    return draw_die(True, True, True, True, dot)
    else:
    	    return ''

def draw_die(c, f, b, s, dot):
    """Return an ascii art representation of a die.

    c, f, b, & s are boolean arguments. This function returns a multi-line
    string of the following form, where the letters in the diagram are either
    filled if the corresponding argument is true, or empty if it is false.
    
     -------
    | b   f |
    | s c s |
    | f   b |
     -------    

    Note: The sides with 2 and 3 dots have 2 possible depictions due to
          rotation. Either representation is acceptable. 

    Note: This function uses Python syntax not yet covered in the course.
    
    c, f, b, s -- booleans; whether to place dots in corresponding positions
    dot        -- A length-one string to use for a dot
    """
    border = ' -------'
    def draw(b): 
        return dot if b else ' '
    c, f, b, s = map(draw, [c, f, b, s])
    top =    ' '.join(['|', b, ' ', f, '|'])
    middle = ' '.join(['|', s, c,   s, '|'])
    bottom = ' '.join(['|', f, ' ', b, '|'])
    return '\n'.join([border, top, middle, bottom, border])


# Game simulator

def play(strategy, opponent_strategy):
    """Simulate a game and return 0 if the first player wins and 1 otherwise.
    
    strategy -- The strategy function for the first player (who plays first)
    opponent_strategy -- The strategy function for the second player
    """
    who = 0 # Which player is about to take a turn, 0 (first) or 1 (second)
    global goal
    a = 0
    b = 0
    #problem strategy takes two arguments but only takes one as plan in take_turn
    while a < goal and b < goal:
    	    if (a + b)%7 == 0:
    	    	    a = a + take_turn(strategy(a, b), make_fair_die(4), who)
    	    	    if a >= goal:
    	    	    	    return 0
    	    elif (a + b)%7 != 0:
    	    	    a = a + take_turn(strategy(a, b), make_fair_die(6), who)
    	    	    if a >= goal:
    	    	    	    return 0
    	    if (a + b)%7 == 0:
    	    	    b = b + take_turn(opponent_strategy(b, a), make_fair_die(4), 1)
    	    	    if b >= goal:
    	    	    	    return 1
    	    elif (a + b)%7 != 0:
    	    	    b = b + take_turn(opponent_strategy(b, a), make_fair_die(6), 1)
    	    	    if b >= goal:
    	    	    	    return 1

def other(who):
    """Return the other player, for players numbered 0 and 1.
    
    >>> other(0)
    1
    >>> other(1)
    0
    """
    return (who + 1) % 2


# Basic Strategies

def make_roll_until_plan(turn_goal=20):
    """Return a plan to roll until turn total is at least turn_goal."""
    def plan(turn):
        if turn >= turn_goal:
            return hold
        else:
            return roll
    return plan

def make_roll_until_strategy(turn_goal):
    """Return a strategy to always adopt a plan to roll until turn_goal.
    
    A strategy is a function that takes two game scores as arguments and
    returns a plan (which is a function from turn totals to actions).
    """
    def strategy(a, b):
        return make_roll_until_plan(turn_goal)
    return strategy 

def make_roll_until_strategy_test():
    """Test that make_roll_until_strategy gives a strategy that returns correct
    roll-until plans."""
    strategy = make_roll_until_strategy(15)    
    plan = strategy(0, 0)
    assert plan(14) == roll, 'Should have returned roll'
    assert plan(15) == hold, 'Should have returned hold'
    assert plan(16) == hold, 'Should have returned hold'


# Experiments (Phase 2)

def average_value(fn, num_samples):
    """Compute the average value returned by fn over num_samples trials.
    
    >>> d = make_test_die(1, 3, 5, 7)
    >>> average_value(d, 100)
    4.0
    """
    d = 0
    a = 0
    while d < num_samples:
    	    a = fn() + a
    	    d = d + 1
    return a/num_samples
    	    

def averaged(fn, num_samples=1000):
    """Return a function that returns the average_value of fn when called.

    Note: To implement this function, you will have to use *args syntax, a new
          Python feature introduced in this project.  See the project
          description for details.

    >>> die = make_test_die(3, 1, 5, 7)
    >>> avg_die = averaged(die)
    >>> avg_die()
    4.0
    >>> avg_turn = averaged(take_turn)
    >>> avg_turn(make_roll_until_plan(4), die, 'The player', False)
    3.0

    In this last example, two different turn scenarios are averaged.  
    - In the first, the player rolls a 3 then a 1, receiving a score of 1.
    - In the other, the player rolls a 5 (then holds on the 7), scoring 5.
    Thus, the average value is 3.0

    Note: If this last test is called with comments=True in take_turn, the
    doctests will fail because of the extra output.
    """
    def h(*args):
    	    a = 0
    	    d = 0
    	    while d < num_samples:
    	    	    a = fn(*args) + a
    	    	    d = d + 1
    	    return a/num_samples
    return h
    
    

def compare_strategies(strategy, baseline=make_roll_until_strategy(20)):
    """Return the average win rate (out of 1) of strategy against baseline."""
    #strategy goes into play as your strategy and baseline goes into play as opponent strategy
    as_first = 1 - averaged(play)(strategy, baseline)
    as_second = averaged(play)(baseline, strategy)
    return (as_first + as_second) / 2  # Average the two results

def eval_strategy_range(make_strategy, lower_bound, upper_bound):
    """Return the best integer argument value for make_strategy to use against
    the roll-until-20 baseline, between lower_bound and upper_bound (inclusive).

    make_strategy -- A one-argument function that returns a strategy.
    lower_bound -- lower bound of the evaluation range
    upper_bound -- upper bound of the evaluation range
    """
    best_value, best_win_rate = 0, 0
    value = lower_bound
    while value <= upper_bound:
        strategy = make_strategy(value)
        win_rate = compare_strategies(strategy)
        print(value, 'win rate against the baseline:', win_rate) 
        if win_rate > best_win_rate:
            best_win_rate, best_value = win_rate, value
        value += 1
    return best_value

def run_strategy_experiments():
    """Run a series of strategy experiments and report results."""
    #a = eval_strategy_range(make_roll_until_strategy, 18, 18)
    #Returned 18, win rate: .5585, .5465, .526
    #a = eval_strategy_range(make_die_specific_strategy, 14, 14)
    #Returned 15, win rate: .521, .5285, .526
    #Returned 14, win rate: .5205, .5115, .5145
    a = eval_strategy_range(make_pride_strategy,0, 15)
    #Returned 3, win rate: .5165, .499, .501, .504
    #Returned 5, win rate: .5245, .491, .516
    print(a)

def test_60_win():
	"""Runs compare_strategies 100 times and returns the average win rate
	"""
	a = 0
	b = 0
	c = 0
	while a < 100:
		b = compare_strategies(final_strategy)
		c = c + b
		a = a + 1
	print(c/100)

def make_die_specific_strategy(four_side_goal, six_side_goal=20):
    """Return a strategy that returns a die-specific roll-until plan.
    
    four_side_goal -- the roll-until goal whenever the turn uses a 4-sided die
    six_side_goal -- the roll-until goal whenever the turn uses a 6-sided die

    """
    def strategy(a, b):
    	    if (a + b)%7 == 0:
    	    	return make_roll_until_plan(four_side_goal)
    	    else:
    	    	return make_roll_until_plan(six_side_goal)
    return strategy

def make_pride_strategy(margin, turn_goal=20):
    """Return a strategy that wants to finish a turn winning by at least margin.

    margin -- the size of the lead that the player requires
    turn_goal -- the minimum roll-until turn goal, even when winning
    """
    def strategy(a, b):
    	    if a >= (b+margin):
    	    	    return make_roll_until_plan(turn_goal)
    	    else:
    	    	    return make_roll_until_plan(b-a+margin)
    return strategy

#Dictionary consisting of optimized turns to win after a set roll amount
#http://www.durangobill.com/Pig1Statistics.html with my own modifications
#NOTE ONLY OPTIMIZED FOR SIX SIDED DIE
roll_index = {}
roll_index[99] = (1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1)
roll_index[98] = (2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2)
roll_index[97] = (3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3)
roll_index[96] = (4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4)
roll_index[95] = (5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5)
roll_index[94] = (6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6)
roll_index[93] = (7,    7,    7,    7,    7,    4,    4,    4,    4,    7,    7,    7,    7,    7,    7)
roll_index[92] = (8,    8 ,   8 ,   8 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4)
roll_index[91] = (9,    9,    9 ,   4 ,   4 ,   4 ,   4 ,   4  ,  4  ,  4  ,  4  ,  4 ,   4 ,   4 ,   4)
roll_index[90] = (10   ,10  , 10 ,   4 ,   4  ,  4   , 4  ,  4  ,  4  ,  4   , 4   , 4    ,4   , 4   , 4)
roll_index[89] = (11   ,11 ,  11 ,   4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4   , 4  ,  4 ,   4  ,  4)
roll_index[88] = (12,   12,   12,    5,    4,    4,    4,    4    ,4,    4,    4  ,  4  ,  4  ,  4  ,  4)
roll_index[87] = (13 ,  13,    9 ,   5 ,   5 ,   4,    4,    4,    4,    4,    4,    4 ,   5,    5,    5)
roll_index[86] = (14 ,  14 ,   9 ,   6 ,   6 ,   5,    4,    4,    4 ,   4  ,  5  ,  5,    5 ,   5,    5)
roll_index[85] = (14  , 14  ,  9  ,  6  ,  6  ,  5 ,   4  ,  4 ,   4 ,   4 ,   5 ,   5,    5,    5 ,   5)
roll_index[84] = (16 ,  16 ,  10 ,   8  ,  7 ,   6,    5 ,   4,    4 ,   5 ,   5 ,   6  ,  6 ,   6 ,   6)
roll_index[83] = (17 ,  17  , 10  ,  8  ,  8 ,   6 ,   5 ,   4 ,   4 ,   5 ,   5 ,   6 ,   6 ,   6  ,  6)
roll_index[82] = (18 ,  18 ,  11 ,   9  ,  8  ,  6  ,  4   , 4  ,  4  ,  4 ,   5  ,  5  ,  6  ,  6  ,  6)
roll_index[81] = (19  , 19  , 11  , 10  ,  8  ,  6 ,   5 ,   4  ,  4  ,  4  ,  5  ,  5  ,  5  ,  6  ,  6)
roll_index[80] = (20 ,  20 ,  12,   10,    9 ,   6 ,   5 ,   4 ,   4 ,   4,    5  ,  5 ,   6   , 6 ,   6)
roll_index[79] = (21  , 21  , 13  , 11  ,  9  ,  6  ,  5 ,   5  ,  5 ,   5 ,   5 ,   5 ,   6  ,  6 ,   6)
roll_index[78] = (22  , 22  , 13  , 12 ,   9 ,   7 ,   6 ,   5 ,   5  ,  5   , 5  ,  6  ,  6  ,  6  ,  6)
roll_index[77] = (23   ,23  , 14 ,  13  ,  9 ,   7  ,  6  ,  6 ,   5 ,   5 ,   6 ,   6 ,   6 ,   7 ,   7)
roll_index[76] = (24,   24 ,  15,   13,   10,    8,    7,    6,    6,    6,    6,    6,    7 ,   7,    7)
roll_index[75] = (25,   25 ,  16 ,  14 ,  10,    8 ,   7 ,   6 ,   6 ,   6,    6 ,   7 ,   7 ,   7 ,   7)
roll_index[74] = (26,   26,   16,   14 ,  10 ,   9 ,   7 ,   6 ,   6 ,   6,    6 ,   7  ,  7  ,  8  ,  8)
roll_index[73] = (27 ,  27 ,  17  , 15  , 11  ,  9  ,  8 ,   7 ,   6 ,   6 ,   6  ,  7  ,  7  ,  8  ,  8)
roll_index[72] = (28 ,  28 ,  18 ,  15 ,  11  ,  9 ,   8 ,   7 ,   6,    6,    6 ,   7 ,   7 ,   8  ,  8)
roll_index[71] = (29  , 29  , 19 ,  15 ,  11 ,  10 ,   8 ,   7 ,   6 ,   6  ,  6  ,  7 ,   7 ,   8 ,   8)
roll_index[70] = (30  , 30 ,  19,   15,   12,   10,    9 ,   7 ,   6 ,   6 ,   7 ,   7 ,   8 ,   8 ,   8)
roll_index[69] = (31,   31,   20,   15 ,  12 ,  11 ,   9 ,   7 ,   7 ,   7 ,   7  ,  7 ,   8,    8,    8)
roll_index[68] = (32 ,  32,   21 ,  16  , 13 ,  11,    9 ,   8,    7,    7,    7 ,   7 ,   8,    8 ,   9)
roll_index[67] = (33 ,  33 ,  21 ,  16 ,  13 ,  11  ,  9 ,   8 ,   7 ,   7  ,  7  ,  8 ,   8 ,   8 ,   9)
roll_index[66] = (34 ,  34,   22 ,  17,   13,   11,   10 ,   8 ,   8  ,  7 ,   7,    8,    8 ,   9 ,   9)
roll_index[65] = (35  , 35 ,  22  , 17 ,  14 ,  12  , 10 ,   9 ,   8 ,   8 ,   8 ,   8 ,   8  ,  9 ,   9)
roll_index[64] = (36 ,  36,   22,   17,   14 ,  12 ,  10,    9,    8,    8,    8 ,   8 ,   9 ,   9,    9)
roll_index[63] = (37 ,  37 ,  23 ,  17 ,  14 ,  12 ,  11  ,  9 ,   9 ,   8 ,   8 ,   8 ,   9 ,   9 ,   9)
roll_index[62] = (38 ,  38 ,  23,   18,   14 ,  12,   11 ,  10,    9,    8,    8 ,   8 ,   9  ,  9 ,  10)
roll_index[61] = (39 ,  39  , 24  , 18  , 15  , 13 ,  11 ,  10 ,   9 ,   8 ,   8 ,   8 ,   9 ,   9 ,  10)
roll_index[60] = (40 ,  40 ,  24 ,  18,   15,   13,   12 ,  10,    9  ,  9 ,   8  ,  8 ,   9 ,   9 ,  10)
roll_index[59] = (41 ,  41 ,  25  , 19  , 16  , 14 ,  12  , 11  ,  9  ,  9  ,  8  ,  9  ,  9 ,  10  , 10)
roll_index[58] = (42 ,  42 ,  25 ,  19,   16 ,  14 ,  12 ,  11 ,  10 ,   9 ,   9,    9 ,   9 ,  10 ,  10)
roll_index[57] = (43 ,  43 ,  26 ,  19  , 17  , 14  , 12  , 11  , 10 ,   9  ,  9  ,  9  ,  9  , 10  , 10)
roll_index[56] = (44  , 44,   26 ,  20 ,  17 ,  14,   13 ,  11 ,  10 ,   9,    9 ,   9,    9,   10 ,  10)
roll_index[55] = (45  , 45  , 27 ,  20  , 17  , 15  , 13  , 11  , 10  , 10 ,   9  ,  9  , 10 ,  10 ,  10)
roll_index[54] = (46 ,  46,   28 ,  21,   18 ,  15 ,  13,   12 ,  11,   10,   10  ,  9 ,  10,   10,   11)
roll_index[53] = (47  , 47  , 28  , 21 ,  18 ,  15  , 13  , 12  , 11  , 10 ,  10  , 10 ,  10  , 10 ,  11)
roll_index[52] = (48  , 48 ,  29 ,  22 ,  19  , 16  , 14  , 12 ,  11 ,  10 ,  10 ,  10  , 10 ,  10 ,  11)
roll_index[51] = (49   ,49  , 29  , 22  , 19  , 16  , 14  , 12  , 11 ,  11  , 10  , 10  , 10  , 11 ,  11)
roll_index[50] = (50  , 50  , 30 ,  23  , 19 ,  16 ,  14 ,  13  , 12 ,  11 ,  10 ,  10 ,  10 ,  11,   11)
roll_index[49] = (51,   51,   31 ,  23  , 20  , 16 ,  14 ,  13 ,  12 ,  11 ,  10  , 10  , 10  , 11 ,  11)
roll_index[48] = (52 ,  52  , 31 ,  24 ,  20,   17 ,  15,   13 ,  12,   11,   11 ,  10 ,  11 ,  11 ,  11)
roll_index[47] = (53 ,  53  , 32  , 24 ,  20  , 17  , 15 ,  13,   12 ,  11  , 11  , 11  , 11  , 11  , 11)
roll_index[46] = (54 ,  54 ,  32,   25 ,  21,   17,   15,   14,   12,   12 ,  11 ,  11 ,  11 ,  11 ,  11)
roll_index[45] = (55 ,  55 ,  32  , 25  , 21 ,  18 ,  15  , 14 ,  13 ,  12 ,  11 ,  11 ,  11 ,  11 ,  12)
roll_index[44] = (56  , 56 ,  33 ,  26,   21,   18  , 16  , 14  , 13 ,  12,   11 ,  11 ,  11 ,  11 ,  12)
roll_index[43] = (57  , 57  , 33  , 26  , 22  , 18  , 16  , 14  , 13  , 12  , 12   ,11 ,  11 ,  11,   12)
roll_index[42] = (58,   58,   34,   26,   22,   19,   16,   15,   13,   12,   12,   11 ,  11  , 12 ,  12)
roll_index[41] = (59,   59 ,  34 ,  27 ,  22 ,  19,   17,   15,   14,   13 ,  12 ,  12 ,  11 ,  12,   12)
roll_index[40] = (60 ,  60 ,  35 ,  27,   23 ,  19 ,  17,   15 ,  14 ,  13 ,  12 ,  12 ,  12 ,  12,   12)
roll_index[39] = (61 ,  61 ,  35  , 28  , 23  , 19  , 17 ,  15 ,  14  , 13  , 12  , 12  , 12 ,  12 ,  12)
roll_index[38] = (62  , 62 ,  36 ,  28 ,  23 ,  20 ,  17 ,  16 ,  14 ,  13 ,  12 ,  12 ,  12  , 12  , 12)
roll_index[37] = (63 ,  63 ,  37 ,  28 ,  23 ,  20 ,  18 ,  16  , 14  , 13 ,  13 ,  12 ,  12 ,  12 ,  12)
roll_index[36] = (64 ,  64 ,  37 ,  29  , 24 ,  20 ,  18 ,  16,   15,   14,   13 ,  12,   12 ,  12 ,  13)
roll_index[35] = (65 ,  65 ,  38  , 29  , 24  , 21 ,  18 ,  16 ,  15,   14 ,  13 ,  13 ,  12  , 12 ,  13)
roll_index[34] = (66  , 66 ,  38  , 30 ,  24 ,  21,   19 ,  17 ,  15 ,  14 ,  13 ,  13 ,  13 ,  13 ,  13)
roll_index[33] = (67 ,  67 ,  39 ,  30 ,  25  , 21  , 19  , 17  , 15  , 14  , 13  , 13  , 13  , 13 ,  13)
roll_index[32] = (68 ,  68 ,  39 ,  30  , 25 ,  22 ,  19  , 17  , 16 ,  14  , 14 ,  13,   13,   13 ,  13)
roll_index[31] = (69  , 69  , 40  , 31 ,  25 ,  22 ,  19 ,  17 ,  16,   15 ,  14 ,  13 ,  13 ,  13 ,  13)
roll_index[30] = (70  , 70  , 40 ,  31 ,  26 ,  22,   20 ,  18 ,  16 ,  15 ,  14 ,  13 ,  13 ,  13 ,  13)
roll_index[29] = (71  , 71 ,  41  , 32 ,  26 ,  22  , 20 ,  18 ,  16  , 15  , 14  , 14  , 13  , 13 ,  13)
roll_index[28] = (72,   72,   41,   32,   26,   23,   20,   18,   16,   15,   14,   14,   13,   13,   13)
roll_index[27] = (73,   73 ,  42 ,  32,   27,   23,   20,   18,   17,   15,   15 ,  14,   14,   13,   13)
roll_index[26] = (74,   74,   42,   33,   27,   23,   21,   19,   17,   16,   15,   14,   14,   14,   14)
roll_index[25] = (75,   75,   43 ,  33,   27,   24,   21,   19,   17,   16,   15,   14,   14,   14,   14)
roll_index[24] = (76,   76,   43,   34,   28,   24,   21,   19,   17,   16,   15,   14,   14,   14,   14)
roll_index[23] = (77,   77,   44,   34,   28,   24,   22,   19,   18,   16,   15,   15,   14,   14,   14)
roll_index[22] = (78 ,  78 ,  44 ,  34 ,  28 ,  25,   22,   20,   18,   17,   16,   15,   14,   14 ,  14)
roll_index[21] = (79  , 79 ,  45 ,  35 ,  29 ,  25  , 22  , 20 ,  18 ,  17 ,  16 ,  15 ,  15 ,  14,   14)
roll_index[20] = (80  , 80 ,  45 ,  35 ,  29 ,  25  , 22 ,  20,   18 ,  17 ,  16  , 15  , 15  , 14  , 14)
roll_index[19] = (81 ,  81 ,  46 ,  36,   29,   26,   23,   20,   19,   17,   16,   15 ,  15,   15,   14)
roll_index[18] = (82,   82,   47,   36,   30,   26,   23,   21,   19,   17,   16,   16,   15,   15,   15)
roll_index[17] = (83,   83,   47,   36,   30,   26,   23,   21,   19,   18,   17,   16,   15,   15,   15)
roll_index[16] = (84,   84,   48,   37,   31,   27,   23,   21,   19,   18,   17,   16 ,  15,   15,   15)
roll_index[15] = (85,   85,   48,   37,   31,   27,   24,   21,   20,   18,   17,   16,   16,   15,   15)
roll_index[14] = (86,   86,   49,   38,   31,   27,   24,   22,   20,   18,   17,   16,   16,   15,   15)
roll_index[13] = (87,   87 ,  49,   38,   32,   28,   24,   22,   20,   19,   17,   17,   16,   15,   15)
roll_index[12] = (88,   88,   50,   39,   32,   28,   25,   22,   20,   19,   18,   17,   16,   16,   15)
roll_index[11] = (89,   89,   50 ,  39,   32,   28,   25,   22,   21,   19,   18,   17,   16,   16,   15)
roll_index[10] = (90,   90,   51,   39,   33,   28,   25,   23,   21,   19,   18,   17,   16,   16,   16)
roll_index[9] = (91,   91,   51,   40,   33,   29,   25,   23,   21,   20,   18,   17 ,  17,   16,   16)
roll_index[8] = (92,   92,   52,   40,   34,   29,   26,   23,   21,   20,   19,   18,   17,   16 ,  16)
roll_index[7] = (93,   93,   52,   41,   34 ,  29,   26,   23,   22,   20,   19,   18,   17,   16,   16)
roll_index[6] = (94,   94,   53,   41,   34,   30,   26,   24,   22,   20,   19 ,  18,   17,   17,   16)
roll_index[5] = (95,   95 ,  53 ,  42 ,  35 ,  30 ,  26 ,  24 ,  22 ,  20 ,  19 ,  18 ,  17 ,  17 ,  16)
roll_index[4] = (96,   96,   54,   42,   35,   30,   27,   24,   22,   21,   19,   18,   18,   17,   17)
roll_index[3] = (97,   97,   55,   42,   35,   31,   27,   25,   22,   21,   20,   19,   18,   17,   17)
roll_index[2] = (98,   98,   55,   43,   36,   31,   27 ,  25 ,  23,   21,   20,   19 ,  18 ,  17,   17)
roll_index[1] = (99,   99,   56,   43,   36,   31,   28,   25,   23,   21,   20,   19,   18,   17,   17)
roll_index[0] = (100,  100,   56,   44,   36,   32,   28,   25,   23,   22,   20,   19,   18,   18 ,  17)

def test_strategy(score, opponent_score):
    """Sandbox for development of final strategy"""
    global roll_index
    global goal
    def test_plan(score, opponent_score):	    
    	    def plan(turn):
    	    	    if (score + opponent_score)%7 ==0:
    	    	    	    if turn <= roll_index[score][int((goal - opponent_score)**(58/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    	    if (score + opponent_score + turn)%7 ==0:
    	    	    	    if turn <= roll_index[score][int((goal - opponent_score)**(58/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    	    else:
    	    	    	    if turn <= roll_index[score][int(11/100*(goal - opponent_score)**(92/100) + 20/100*(goal - opponent_score)**(40/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    return plan
    return test_plan(score, opponent_score)
	
def non_indexed_strategy(score, opponent_score):
    """For the porpose of idea reference and keeping something before I entered that dictionary, sentimental value"""
    global goal
    def test_plan(score, opponent_score):
    	    def plan(turn):
    	    	    #End game situation
    	    	    if (goal - score) <= 10:         
    	    	    	    if turn < 6:
    	    	    	    	    return roll
    	    	    	    else:
    	    	    	    	    return hold
    	    	    if (goal - score) <= 18:
    	    	    	    #Optimizing for 2 turns
    	    	    	    if turn < 14:
    	    	    	    	    return roll
    	    	    	    else:
    	    	    	    	    return hold
    	    	    #In 4-die situation
    	    	    if (score + opponent_score)%7 == 0:
    	    	    	    #Trying to return a 4 die to the opponent as well
    	    	    	    if (score + opponent_score + turn)%7 == 0:
    	    	    	    	    if turn <12:
    	    	    	    	    	    return roll
    	    	    	    	    else:
    	    	    	    	    	    return hold
    	    	    	    if turn < 20:
    	    	    	    	return roll
    	    	    	    else:
    	    	    	        return hold
    	    	    else:
    	    	    	    #General strategy is roll until
    	    	    	    #With elements of pride
    	    	    	    if score >= (opponent_score+10):
    	    	    	    	    if turn < 25:
    	    	    	    	    	return roll
    	    	    	    	    else:
    	    	    	    	    	return hold
    	    	    	    else:
    	    	    	    	    if turn < (opponent_score-score+3):
    	    	    	    	    	return roll
    	    	    	    	    else:
    	    	    	    	    	if turn < 24:
    	    	    	    	    		return roll
    	    	    	    	    	else:
    	    	    	    	    		return hold
    	    return plan
    return test_plan(score, opponent_score)

def final_strategy(score, opponent_score):
    """Write a brief description of your final strategy.

    Utilizes a dictionary consisting of the optimal values to roll for given the player's current score and how many turns the player wants to play before reaching the goal. 
    Riskier rolling (lower turns to win) is implemented when the opponent is closer to the goal, this is decided by a "risk equation".
    Implements elements of 4 sided dice optimization although the key is only optimized for a 6 sided dice.
    
    Key was not created by me but modified by me, credits go to http://www.durangobill.com/Pig1Statistics.html
    """
    #Index number refers to player's current score white numbers in the tuples refer to optimized number of rolls to achive win in set amount of turns (0 being in 1 turn, 1 being in 2 turns...)
    #Sloppy commas don't matter lol
    roll_index = {}
    roll_index[99] = (1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1)
    roll_index[98] = (2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2)
    roll_index[97] = (3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3)
    roll_index[96] = (4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4)
    roll_index[95] = (5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5)
    roll_index[94] = (6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6)
    roll_index[93] = (7,    7,    7,    7,    7,    4,    4,    4,    4,    7,    7,    7,    7,    7,    7)
    roll_index[92] = (8,    8 ,   8 ,   8 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4 ,   4)
    roll_index[91] = (9,    9,    9 ,   4 ,   4 ,   4 ,   4 ,   4  ,  4  ,  4  ,  4  ,  4 ,   4 ,   4 ,   4)
    roll_index[90] = (10   ,10  , 10 ,   4 ,   4  ,  4   , 4  ,  4  ,  4  ,  4   , 4   , 4    ,4   , 4   , 4)
    roll_index[89] = (11   ,11 ,  11 ,   4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4  ,  4   , 4  ,  4 ,   4  ,  4)
    roll_index[88] = (12,   12,   12,    5,    4,    4,    4,    4    ,4,    4,    4  ,  4  ,  4  ,  4  ,  4)
    roll_index[87] = (13 ,  13,    9 ,   5 ,   5 ,   4,    4,    4,    4,    4,    4,    4 ,   5,    5,    5)
    roll_index[86] = (14 ,  14 ,   9 ,   6 ,   6 ,   5,    4,    4,    4 ,   4  ,  5  ,  5,    5 ,   5,    5)
    roll_index[85] = (14  , 14  ,  9  ,  6  ,  6  ,  5 ,   4  ,  4 ,   4 ,   4 ,   5 ,   5,    5,    5 ,   5)
    roll_index[84] = (16 ,  16 ,  10 ,   8  ,  7 ,   6,    5 ,   4,    4 ,   5 ,   5 ,   6  ,  6 ,   6 ,   6)
    roll_index[83] = (17 ,  17  , 10  ,  8  ,  8 ,   6 ,   5 ,   4 ,   4 ,   5 ,   5 ,   6 ,   6 ,   6  ,  6)
    roll_index[82] = (18 ,  18 ,  11 ,   9  ,  8  ,  6  ,  4   , 4  ,  4  ,  4 ,   5  ,  5  ,  6  ,  6  ,  6)
    roll_index[81] = (19  , 19  , 11  , 10  ,  8  ,  6 ,   5 ,   4  ,  4  ,  4  ,  5  ,  5  ,  5  ,  6  ,  6)
    roll_index[80] = (20 ,  20 ,  12,   10,    9 ,   6 ,   5 ,   4 ,   4 ,   4,    5  ,  5 ,   6   , 6 ,   6)
    roll_index[79] = (21  , 21  , 13  , 11  ,  9  ,  6  ,  5 ,   5  ,  5 ,   5 ,   5 ,   5 ,   6  ,  6 ,   6)
    roll_index[78] = (22  , 22  , 13  , 12 ,   9 ,   7 ,   6 ,   5 ,   5  ,  5   , 5  ,  6  ,  6  ,  6  ,  6)
    roll_index[77] = (23   ,23  , 14 ,  13  ,  9 ,   7  ,  6  ,  6 ,   5 ,   5 ,   6 ,   6 ,   6 ,   7 ,   7)
    roll_index[76] = (24,   24 ,  15,   13,   10,    8,    7,    6,    6,    6,    6,    6,    7 ,   7,    7)
    roll_index[75] = (25,   25 ,  16 ,  14 ,  10,    8 ,   7 ,   6 ,   6 ,   6,    6 ,   7 ,   7 ,   7 ,   7)
    roll_index[74] = (26,   26,   16,   14 ,  10 ,   9 ,   7 ,   6 ,   6 ,   6,    6 ,   7  ,  7  ,  8  ,  8)
    roll_index[73] = (27 ,  27 ,  17  , 15  , 11  ,  9  ,  8 ,   7 ,   6 ,   6 ,   6  ,  7  ,  7  ,  8  ,  8)
    roll_index[72] = (28 ,  28 ,  18 ,  15 ,  11  ,  9 ,   8 ,   7 ,   6,    6,    6 ,   7 ,   7 ,   8  ,  8)
    roll_index[71] = (29  , 29  , 19 ,  15 ,  11 ,  10 ,   8 ,   7 ,   6 ,   6  ,  6  ,  7 ,   7 ,   8 ,   8)
    roll_index[70] = (30  , 30 ,  19,   15,   12,   10,    9 ,   7 ,   6 ,   6 ,   7 ,   7 ,   8 ,   8 ,   8)
    roll_index[69] = (31,   31,   20,   15 ,  12 ,  11 ,   9 ,   7 ,   7 ,   7 ,   7  ,  7 ,   8,    8,    8)
    roll_index[68] = (32 ,  32,   21 ,  16  , 13 ,  11,    9 ,   8,    7,    7,    7 ,   7 ,   8,    8 ,   9)
    roll_index[67] = (33 ,  33 ,  21 ,  16 ,  13 ,  11  ,  9 ,   8 ,   7 ,   7  ,  7  ,  8 ,   8 ,   8 ,   9)
    roll_index[66] = (34 ,  34,   22 ,  17,   13,   11,   10 ,   8 ,   8  ,  7 ,   7,    8,    8 ,   9 ,   9)
    roll_index[65] = (35  , 35 ,  22  , 17 ,  14 ,  12  , 10 ,   9 ,   8 ,   8 ,   8 ,   8 ,   8  ,  9 ,   9)
    roll_index[64] = (36 ,  36,   22,   17,   14 ,  12 ,  10,    9,    8,    8,    8 ,   8 ,   9 ,   9,    9)
    roll_index[63] = (37 ,  37 ,  23 ,  17 ,  14 ,  12 ,  11  ,  9 ,   9 ,   8 ,   8 ,   8 ,   9 ,   9 ,   9)
    roll_index[62] = (38 ,  38 ,  23,   18,   14 ,  12,   11 ,  10,    9,    8,    8 ,   8 ,   9  ,  9 ,  10)
    roll_index[61] = (39 ,  39  , 24  , 18  , 15  , 13 ,  11 ,  10 ,   9 ,   8 ,   8 ,   8 ,   9 ,   9 ,  10)
    roll_index[60] = (40 ,  40 ,  24 ,  18,   15,   13,   12 ,  10,    9  ,  9 ,   8  ,  8 ,   9 ,   9 ,  10)
    roll_index[59] = (41 ,  41 ,  25  , 19  , 16  , 14 ,  12  , 11  ,  9  ,  9  ,  8  ,  9  ,  9 ,  10  , 10)
    roll_index[58] = (42 ,  42 ,  25 ,  19,   16 ,  14 ,  12 ,  11 ,  10 ,   9 ,   9,    9 ,   9 ,  10 ,  10)
    roll_index[57] = (43 ,  43 ,  26 ,  19  , 17  , 14  , 12  , 11  , 10 ,   9  ,  9  ,  9  ,  9  , 10  , 10)
    roll_index[56] = (44  , 44,   26 ,  20 ,  17 ,  14,   13 ,  11 ,  10 ,   9,    9 ,   9,    9,   10 ,  10)
    roll_index[55] = (45  , 45  , 27 ,  20  , 17  , 15  , 13  , 11  , 10  , 10 ,   9  ,  9  , 10 ,  10 ,  10)
    roll_index[54] = (46 ,  46,   28 ,  21,   18 ,  15 ,  13,   12 ,  11,   10,   10  ,  9 ,  10,   10,   11)
    roll_index[53] = (47  , 47  , 28  , 21 ,  18 ,  15  , 13  , 12  , 11  , 10 ,  10  , 10 ,  10  , 10 ,  11)
    roll_index[52] = (48  , 48 ,  29 ,  22 ,  19  , 16  , 14  , 12 ,  11 ,  10 ,  10 ,  10  , 10 ,  10 ,  11)
    roll_index[51] = (49   ,49  , 29  , 22  , 19  , 16  , 14  , 12  , 11 ,  11  , 10  , 10  , 10  , 11 ,  11)
    roll_index[50] = (50  , 50  , 30 ,  23  , 19 ,  16 ,  14 ,  13  , 12 ,  11 ,  10 ,  10 ,  10 ,  11,   11)
    roll_index[49] = (51,   51,   31 ,  23  , 20  , 16 ,  14 ,  13 ,  12 ,  11 ,  10  , 10  , 10  , 11 ,  11)
    roll_index[48] = (52 ,  52  , 31 ,  24 ,  20,   17 ,  15,   13 ,  12,   11,   11 ,  10 ,  11 ,  11 ,  11)
    roll_index[47] = (53 ,  53  , 32  , 24 ,  20  , 17  , 15 ,  13,   12 ,  11  , 11  , 11  , 11  , 11  , 11)
    roll_index[46] = (54 ,  54 ,  32,   25 ,  21,   17,   15,   14,   12,   12 ,  11 ,  11 ,  11 ,  11 ,  11)
    roll_index[45] = (55 ,  55 ,  32  , 25  , 21 ,  18 ,  15  , 14 ,  13 ,  12 ,  11 ,  11 ,  11 ,  11 ,  12)
    roll_index[44] = (56  , 56 ,  33 ,  26,   21,   18  , 16  , 14  , 13 ,  12,   11 ,  11 ,  11 ,  11 ,  12)
    roll_index[43] = (57  , 57  , 33  , 26  , 22  , 18  , 16  , 14  , 13  , 12  , 12   ,11 ,  11 ,  11,   12)
    roll_index[42] = (58,   58,   34,   26,   22,   19,   16,   15,   13,   12,   12,   11 ,  11  , 12 ,  12)
    roll_index[41] = (59,   59 ,  34 ,  27 ,  22 ,  19,   17,   15,   14,   13 ,  12 ,  12 ,  11 ,  12,   12)
    roll_index[40] = (60 ,  60 ,  35 ,  27,   23 ,  19 ,  17,   15 ,  14 ,  13 ,  12 ,  12 ,  12 ,  12,   12)
    roll_index[39] = (61 ,  61 ,  35  , 28  , 23  , 19  , 17 ,  15 ,  14  , 13  , 12  , 12  , 12 ,  12 ,  12)
    roll_index[38] = (62  , 62 ,  36 ,  28 ,  23 ,  20 ,  17 ,  16 ,  14 ,  13 ,  12 ,  12 ,  12  , 12  , 12)
    roll_index[37] = (63 ,  63 ,  37 ,  28 ,  23 ,  20 ,  18 ,  16  , 14  , 13 ,  13 ,  12 ,  12 ,  12 ,  12)
    roll_index[36] = (64 ,  64 ,  37 ,  29  , 24 ,  20 ,  18 ,  16,   15,   14,   13 ,  12,   12 ,  12 ,  13)
    roll_index[35] = (65 ,  65 ,  38  , 29  , 24  , 21 ,  18 ,  16 ,  15,   14 ,  13 ,  13 ,  12  , 12 ,  13)
    roll_index[34] = (66  , 66 ,  38  , 30 ,  24 ,  21,   19 ,  17 ,  15 ,  14 ,  13 ,  13 ,  13 ,  13 ,  13)
    roll_index[33] = (67 ,  67 ,  39 ,  30 ,  25  , 21  , 19  , 17  , 15  , 14  , 13  , 13  , 13  , 13 ,  13)
    roll_index[32] = (68 ,  68 ,  39 ,  30  , 25 ,  22 ,  19  , 17  , 16 ,  14  , 14 ,  13,   13,   13 ,  13)
    roll_index[31] = (69  , 69  , 40  , 31 ,  25 ,  22 ,  19 ,  17 ,  16,   15 ,  14 ,  13 ,  13 ,  13 ,  13)
    roll_index[30] = (70  , 70  , 40 ,  31 ,  26 ,  22,   20 ,  18 ,  16 ,  15 ,  14 ,  13 ,  13 ,  13 ,  13)
    roll_index[29] = (71  , 71 ,  41  , 32 ,  26 ,  22  , 20 ,  18 ,  16  , 15  , 14  , 14  , 13  , 13 ,  13)
    roll_index[28] = (72,   72,   41,   32,   26,   23,   20,   18,   16,   15,   14,   14,   13,   13,   13)
    roll_index[27] = (73,   73 ,  42 ,  32,   27,   23,   20,   18,   17,   15,   15 ,  14,   14,   13,   13)
    roll_index[26] = (74,   74,   42,   33,   27,   23,   21,   19,   17,   16,   15,   14,   14,   14,   14)
    roll_index[25] = (75,   75,   43 ,  33,   27,   24,   21,   19,   17,   16,   15,   14,   14,   14,   14)
    roll_index[24] = (76,   76,   43,   34,   28,   24,   21,   19,   17,   16,   15,   14,   14,   14,   14)
    roll_index[23] = (77,   77,   44,   34,   28,   24,   22,   19,   18,   16,   15,   15,   14,   14,   14)
    roll_index[22] = (78 ,  78 ,  44 ,  34 ,  28 ,  25,   22,   20,   18,   17,   16,   15,   14,   14 ,  14)
    roll_index[21] = (79  , 79 ,  45 ,  35 ,  29 ,  25  , 22  , 20 ,  18 ,  17 ,  16 ,  15 ,  15 ,  14,   14)
    roll_index[20] = (80  , 80 ,  45 ,  35 ,  29 ,  25  , 22 ,  20,   18 ,  17 ,  16  , 15  , 15  , 14  , 14)
    roll_index[19] = (81 ,  81 ,  46 ,  36,   29,   26,   23,   20,   19,   17,   16,   15 ,  15,   15,   14)
    roll_index[18] = (82,   82,   47,   36,   30,   26,   23,   21,   19,   17,   16,   16,   15,   15,   15)
    roll_index[17] = (83,   83,   47,   36,   30,   26,   23,   21,   19,   18,   17,   16,   15,   15,   15)
    roll_index[16] = (84,   84,   48,   37,   31,   27,   23,   21,   19,   18,   17,   16 ,  15,   15,   15)
    roll_index[15] = (85,   85,   48,   37,   31,   27,   24,   21,   20,   18,   17,   16,   16,   15,   15)
    roll_index[14] = (86,   86,   49,   38,   31,   27,   24,   22,   20,   18,   17,   16,   16,   15,   15)
    roll_index[13] = (87,   87 ,  49,   38,   32,   28,   24,   22,   20,   19,   17,   17,   16,   15,   15)
    roll_index[12] = (88,   88,   50,   39,   32,   28,   25,   22,   20,   19,   18,   17,   16,   16,   15)
    roll_index[11] = (89,   89,   50 ,  39,   32,   28,   25,   22,   21,   19,   18,   17,   16,   16,   15)
    roll_index[10] = (90,   90,   51,   39,   33,   28,   25,   23,   21,   19,   18,   17,   16,   16,   16)
    roll_index[9] = (91,   91,   51,   40,   33,   29,   25,   23,   21,   20,   18,   17 ,  17,   16,   16)
    roll_index[8] = (92,   92,   52,   40,   34,   29,   26,   23,   21,   20,   19,   18,   17,   16 ,  16)
    roll_index[7] = (93,   93,   52,   41,   34 ,  29,   26,   23,   22,   20,   19,   18,   17,   16,   16)
    roll_index[6] = (94,   94,   53,   41,   34,   30,   26,   24,   22,   20,   19 ,  18,   17,   17,   16)
    roll_index[5] = (95,   95 ,  53 ,  42 ,  35 ,  30 ,  26 ,  24 ,  22 ,  20 ,  19 ,  18 ,  17 ,  17 ,  16)
    roll_index[4] = (96,   96,   54,   42,   35,   30,   27,   24,   22,   21,   19,   18,   18,   17,   17)
    roll_index[3] = (97,   97,   55,   42,   35,   31,   27,   25,   22,   21,   20,   19,   18,   17,   17)
    roll_index[2] = (98,   98,   55,   43,   36,   31,   27 ,  25 ,  23,   21,   20,   19 ,  18 ,  17,   17)
    roll_index[1] = (99,   99,   56,   43,   36,   31,   28,   25,   23,   21,   20,   19,   18,   17,   17)
    roll_index[0] = (100,  100,   56,   44,   36,   32,   28,   25,   23,   22,   20,   19,   18,   18 ,  17)
    global goal
    def test_plan(score, opponent_score):
    	    #Looks at opponents score and decides how risky to roll then looks at the roll_index
    	    def plan(turn):
    	    	    if (score + opponent_score)%7 ==0:
    	    	    	    if turn <= roll_index[score][int((goal - opponent_score)**(58/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    	    if (score + opponent_score + turn)%7 ==0:
    	    	    	    if turn <= roll_index[score][int((goal - opponent_score)**(58/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    	    else:
    	    	    	    if turn <= roll_index[score][int(10/100*(goal - opponent_score)**(92/100))]:
    	    	    	    	     return roll
    	    	    	    else:
    	    	    	    	     prev_opponent_score = opponent_score
    	    	    	    	     return hold 
    	    return plan
    return test_plan(score, opponent_score)

def interactive_strategy(score, opponent_score):
    """Prints total game scores and returns an interactive plan.
    
    Note: this function uses Python syntax not yet covered in the course.
    """
    print('You have', score, 'and they have', opponent_score, 'total score')
    def plan(turn):
        if turn > 0:
            print('You now have a turn total of', turn, 'points')
        while True:
            response = input('(R)oll or (H)old?')
            if response.lower()[0] == 'r':
                return roll
            elif response.lower()[0] == 'h':
                return hold
            print('Huh?')
    return plan
    


@main
def run():
    #take_turn_test()

    # Uncomment the next line to play an interactive game
    #play(interactive_strategy, make_roll_until_strategy(20))

    # Uncomment the next line to test make_roll_until_strategy
    # make_roll_until_strategy_test()

    #run_strategy_experiments()
    
    test_60_win()
    #Returned 0.638 
    
    #print(compare_strategies(test_strategy))
    #return
    
